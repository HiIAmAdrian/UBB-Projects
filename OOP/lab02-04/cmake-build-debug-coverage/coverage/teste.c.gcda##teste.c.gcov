        -:    0:Source:C:/Users/astan/Desktop/OOP/lab02-04/teste/teste.c
        -:    0:Graph:C:\Users\astan\Desktop\OOP\lab02-04\cmake-build-debug-coverage\CMakeFiles\lab02_04.dir\teste\teste.c.gcno
        -:    0:Data:C:\Users\astan\Desktop\OOP\lab02-04\cmake-build-debug-coverage\CMakeFiles\lab02_04.dir\teste\teste.c.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by astan on 3/16/2023.
        -:    3://
        -:    4:#import "../service/service.h"
        -:    5:#import <assert.h>
        -:    6:
function test_add_service called 1 returned 100% blocks executed 71%
        1:    7:void test_add_service(){
        1:    7-block  0
        1:    8:    Service service = createService();
        1:    8-block  0
call    0 returned 1
        1:    9:    assert(addRawMaterialService(&service, "Material1", "Johnson", 32) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:    9-block  0
call    3 never executed
        1:   10:    assert(addRawMaterialService(&service, "Material2", "Johnson", 32) == 0);
        1:   10-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   10-block  1
call    3 never executed
        1:   11:    assert(addRawMaterialService(&service, "Material3", "Johnson", 32) == 0);
        1:   11-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   11-block  1
call    3 never executed
        1:   12:    assert(addRawMaterialService(&service, "", "", -2) == 1);
        1:   12-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   12-block  1
call    3 never executed
        1:   13:    assert(addRawMaterialService(&service, "", "fd", -2) == 1);
        1:   13-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   13-block  1
call    3 never executed
        1:   14:    assert(addRawMaterialService(&service, "ff", "ff", -2) == 1);
        1:   14-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   14-block  1
call    3 never executed
        1:   15:    destroyService(&service);
        1:   15-block  0
call    0 returned 1
        1:   16:}
function test_modify_service called 1 returned 100% blocks executed 80%
        1:   17:void test_modify_service(){
        1:   17-block  0
        1:   18:    Service service = createService();
        1:   18-block  0
call    0 returned 1
        1:   19:    addRawMaterialService(&service, "Material1", "Johnson", 32);
call    0 returned 1
        1:   20:    addRawMaterialService(&service, "Material2", "Johnson", 32);
call    0 returned 1
        1:   21:    addRawMaterialService(&service, "Material3", "Johnson", 32);
call    0 returned 1
        1:   22:    assert(modifyMaterialService(&service, "Material1", "JJ", 23) == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   22-block  0
call    3 never executed
        1:   23:    assert(modifyMaterialService(&service, "ss", "ss", -2) == 1);
        1:   23-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   23-block  1
call    3 never executed
        1:   24:    assert(modifyMaterialService(&service, "Mat", "4", 43) == 1);
        1:   24-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   24-block  1
call    3 never executed
        1:   25:    destroyService(&service);
        1:   25-block  0
call    0 returned 1
        1:   26:}
function test_delete_service called 1 returned 100% blocks executed 76%
        1:   27:void test_delete_service(){
        1:   27-block  0
        1:   28:    Service service = createService();
        1:   28-block  0
call    0 returned 1
        1:   29:    addRawMaterialService(&service, "Material1", "Johnson", 32);
call    0 returned 1
        1:   30:    addRawMaterialService(&service, "Material2", "Johnson", 32);
call    0 returned 1
        1:   31:    addRawMaterialService(&service, "Material3", "Johnson", 32);
call    0 returned 1
        1:   32:    assert(deleteMaterialService(&service, "Material2") == 0);
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   32-block  0
call    3 never executed
        1:   33:    assert(deleteMaterialService(&service, "hehe") == 1);
        1:   33-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   33-block  1
call    3 never executed
        1:   34:    assert(deleteMaterialService(&service, "Material1") == 0);
        1:   34-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   34-block  1
call    3 never executed
        1:   35:    assert(deleteMaterialService(&service, "Material3") == 0);
        1:   35-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   35-block  1
call    3 never executed
        1:   36:    assert(deleteMaterialService(&service, "mat") == 1);
        1:   36-block  0
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
    $$$$$:   36-block  1
call    3 never executed
        1:   37:    destroyService(&service);
        1:   37-block  0
call    0 returned 1
        1:   38:}
        -:   39:
function test_sorts called 1 returned 100% blocks executed 85%
        1:   40:void test_sorts(){
        1:   40-block  0
        1:   41:    Service service = createService();
        1:   41-block  0
call    0 returned 1
        1:   42:    addRawMaterialService(&service, "B", "Johnson", 2);
call    0 returned 1
        1:   43:    addRawMaterialService(&service, "C", "Johnson", 1);
call    0 returned 1
        1:   44:    addRawMaterialService(&service, "A", "Johnson", 3);
call    0 returned 1
        1:   45:    Repo* r = sortService(&service, compareAscendingQuantity);
call    0 returned 1
        1:   46:    RawMaterial* mat = get(r,0);
call    0 returned 1
        1:   47:    assert(mat->quantity == 1);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   47-block  0
call    2 never executed
        1:   48:    destroyRepo(r);
        1:   48-block  0
call    0 returned 1
        1:   49:    r = sortService(&service, (CompareFunction) compareDescendingQuantity);
call    0 returned 1
        1:   50:    mat = get(r,0);
call    0 returned 1
        1:   51:    assert(mat->quantity == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   51-block  0
call    2 never executed
        1:   52:    destroyRepo(r);
        1:   52-block  0
call    0 returned 1
        1:   53:    r = sortService(&service, (CompareFunction) compareAscendingName);
call    0 returned 1
        1:   54:    mat = get(r,0);
call    0 returned 1
        1:   55:    assert(strcmp(mat->name, "A") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   55-block  0
call    2 never executed
        1:   56:    destroyRepo(r);
        1:   56-block  0
call    0 returned 1
        1:   57:    r = sortService(&service, (CompareFunction) compareDescendingName);
call    0 returned 1
        1:   58:    mat = get(r,0);
call    0 returned 1
        1:   59:    assert(strcmp(mat->name, "C") == 0);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   59-block  0
call    2 never executed
        1:   60:    destroyRepo(r);
        1:   60-block  0
call    0 returned 1
        1:   61:    destroyService(&service);
call    0 returned 1
        1:   62:}
        -:   63:
function test_filters_service called 1 returned 100% blocks executed 88%
        1:   64:void test_filters_service(){
        1:   64-block  0
        1:   65:    Service service = createService();
        1:   65-block  0
call    0 returned 1
        1:   66:    addRawMaterialService(&service, "B", "Johnson", 2);
call    0 returned 1
        1:   67:    addRawMaterialService(&service, "C", "Johnson", 1);
call    0 returned 1
        1:   68:    addRawMaterialService(&service, "A", "Johnson", 35);
call    0 returned 1
        1:   69:    addRawMaterialService(&service, "ARF LLL", "Johnson", 244);
call    0 returned 1
        1:   70:    addRawMaterialService(&service, "ABC", "Johnson", 19);
call    0 returned 1
        1:   71:    addRawMaterialService(&service, "F", "Johnson", 3);
call    0 returned 1
        1:   72:    Repo *r = filterLetterService(&service, 'A');
call    0 returned 1
        1:   73:    assert(r->dimension == 3);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   73-block  0
call    2 never executed
        1:   74:    destroyRepo(r);
        1:   74-block  0
call    0 returned 1
        1:   75:    r = filterQuantityService(&service, 30);
call    0 returned 1
        1:   76:    assert(r->dimension == 4);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    $$$$$:   76-block  0
call    2 never executed
        1:   77:    destroyRepo(r);
        1:   77-block  0
call    0 returned 1
        1:   78:    destroyService(&service);
call    0 returned 1
        1:   79:}
        -:   80:
function run_teste called 1 returned 100% blocks executed 100%
        1:   81:void run_teste(){
        1:   81-block  0
        1:   82:    test_add_service();
        1:   82-block  0
call    0 returned 1
        1:   83:    test_modify_service();
call    0 returned 1
        1:   84:    test_delete_service();
call    0 returned 1
        1:   85:    test_filters_service();
call    0 returned 1
        1:   86:    test_sorts();
call    0 returned 1
        1:   87:}
